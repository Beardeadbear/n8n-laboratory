{
  "name": "RAG Chatbot with OpenAI - Company Documents",
  "nodes": [
    {
      "parameters": {
        "operation": "watch",
        "folderId": "={{ $env.GOOGLE_DRIVE_FOLDER_ID }}",
        "options": {
          "includeItemsFromAllDrives": false,
          "supportsAllDrives": false
        }
      },
      "id": "google-drive-file-created",
      "name": "Google Drive File Created",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [240, 200],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "google-drive-credential",
          "name": "Google Drive"
        }
      }
    },
    {
      "parameters": {
        "operation": "watch",
        "folderId": "={{ $env.GOOGLE_DRIVE_FOLDER_ID }}",
        "options": {
          "includeItemsFromAllDrives": false,
          "supportsAllDrives": false
        }
      },
      "id": "google-drive-file-updated",
      "name": "Google Drive File Updated",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [240, 400],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "google-drive-credential",
          "name": "Google Drive"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "fileId": "={{ $json.id }}",
        "options": {
          "fields": "id,name,mimeType,modifiedTime,size"
        }
      },
      "id": "download-file-google-drive",
      "name": "Download File From Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [460, 300],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "google-drive-credential",
          "name": "Google Drive"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const file = $input.first().json;\nconst content = file.content || '';\n\n// Extract text content (handle different file types)\nlet processedContent = '';\nif (file.mimeType.includes('text/') || file.mimeType.includes('application/')) {\n  processedContent = content;\n} else if (file.mimeType.includes('pdf') || file.mimeType.includes('document')) {\n  // For PDFs and Google Docs, content should already be extracted\n  processedContent = content;\n}\n\nreturn {\n  json: {\n    content: processedContent,\n    fileInfo: {\n      id: file.id,\n      name: file.name,\n      type: file.mimeType,\n      modified: file.modifiedTime\n    }\n  }\n};"
      },
      "id": "default-data-loader",
      "name": "Default Data Loader",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "const content = $input.first().json.content;\nconst chunkSize = 1000; // 1000 characters per chunk\nconst overlap = 200; // 200 character overlap\n\n// Create document chunks for vector storage\nconst chunks = [];\nfor (let i = 0; i < content.length; i += chunkSize - overlap) {\n  const chunk = content.slice(i, i + chunkSize);\n  if (chunk.trim().length > 50) { // Only add meaningful chunks\n    chunks.push(chunk);\n  }\n}\n\nreturn {\n  json: {\n    chunks: chunks,\n    fileInfo: $input.first().json.fileInfo\n  }\n};"
      },
      "id": "recursive-character-text-splitter",
      "name": "Recursive Character Text Splitter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "createEmbedding",
        "model": "text-embedding-ada-002",
        "input": "={{ $json.chunks.join('\\n') }}",
        "options": {}
      },
      "id": "embeddings-openai",
      "name": "Embeddings OpenAI",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1120, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credential",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "collectionName": "company_documents",
        "points": "={\n  \"ids\": $json.chunks.map((_, index) => $json.fileInfo.id + '_' + index),\n  \"vectors\": $json.data.map(item => item.embedding),\n  \"payloads\": $json.chunks.map((chunk, index) => ({\n    content: chunk,\n    fileId: $json.fileInfo.id,\n    fileName: $json.fileInfo.name,\n    fileType: $json.fileInfo.type,\n    modifiedTime: $json.fileInfo.modified,\n    chunkIndex: index\n  }))\n}",
        "options": {}
      },
      "id": "pinecone-vector-store",
      "name": "Pinecone Vector Store",
      "type": "n8n-nodes-base.pinecone",
      "typeVersion": 1,
      "position": [1340, 300],
      "credentials": {
        "pineconeApi": {
          "id": "pinecone-credential",
          "name": "Pinecone"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "respondToWebhook",
        "options": {}
      },
      "id": "when-chat-message-received",
      "name": "When Chat Message Received",
      "type": "n8n-nodes-base.chatTrigger",
      "typeVersion": 1,
      "position": [240, 600],
      "webhookId": "chat-webhook"
    },
    {
      "parameters": {
        "operation": "createEmbedding",
        "model": "text-embedding-ada-002",
        "input": "={{ $json.question }}",
        "options": {}
      },
      "id": "embeddings-openai-retrieval",
      "name": "Embeddings OpenAI (retrieval)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [460, 600],
      "credentials": {
        "openAiApi": {
          "id": "openai-credential",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "collectionName": "company_documents",
        "vector": "={{ $json.data[0].embedding }}",
        "limit": 5,
        "scoreThreshold": 0.7,
        "options": {}
      },
      "id": "pinecone-vector-store-retrieval",
      "name": "Pinecone Vector Store (Retrieval)",
      "type": "n8n-nodes-base.pinecone",
      "typeVersion": 1,
      "position": [680, 600],
      "credentials": {
        "pineconeApi": {
          "id": "pinecone-credential",
          "name": "Pinecone"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const question = $input.first().json.question;\nconst searchResults = $input.first().json.results;\n\n// Extract relevant document chunks\nconst relevantChunks = searchResults.map(result => ({\n  content: result.payload.content,\n  fileName: result.payload.fileName,\n  score: result.score\n}));\n\n// Create context for AI\nconst context = relevantChunks\n  .map(chunk => `Document: ${chunk.fileName}\\nContent: ${chunk.content}\\n---`)\n  .join('\\n');\n\n// Create system prompt\nconst systemPrompt = `You are a helpful AI assistant for company employees. \\nAnswer questions based on the provided company documents. \\nIf the information is not in the documents, say so clearly.\\nAlways cite the source document when possible.\\n\\nCompany Documents Context:\\n${context}\\n\\nUser Question: ${question}\\n\\nPlease provide a clear, helpful answer based on the documents above.`;\n\nreturn {\n  json: {\n    systemPrompt: systemPrompt,\n    userQuestion: question,\n    relevantDocuments: relevantChunks.map(chunk => chunk.fileName)\n  }\n};"
      },
      "id": "vector-store-tool",
      "name": "Vector Store Tool",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 600]
    },
    {
      "parameters": {
        "operation": "chat",
        "model": "gpt-4",
        "messages": {
          "messageValues": [
            {
              "role": "system",
              "content": "={{ $json.systemPrompt }}"
            },
            {
              "role": "user",
              "content": "={{ $json.userQuestion }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 1000
        }
      },
      "id": "openai-chat-model-retrieval",
      "name": "OpenAI Chat Model (retrieval)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1120, 600],
      "credentials": {
        "openAiApi": {
          "id": "openai-credential",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $input.first().json.choices[0].message.content;\nconst documents = $input.first().json.relevantDocuments;\n\n// Format response for chat\nconst formattedResponse = `${aiResponse}\\n\\n${documents.length > 0 ? `\\nðŸ“š Sources: ${documents.join(', ')}` : ''}`;\n\nreturn {\n  json: {\n    response: formattedResponse,\n    plainText: aiResponse,\n    sources: documents\n  }\n};"
      },
      "id": "ai-agent",
      "name": "AI Agent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 600]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.plainText }}",
        "options": {}
      },
      "id": "respond-to-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 600]
    }
  ],
  "connections": {
    "Google Drive File Created": {
      "main": [
        [
          {
            "node": "Download File From Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive File Updated": {
      "main": [
        [
          {
            "node": "Download File From Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File From Google Drive": {
      "main": [
        [
          {
            "node": "Default Data Loader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "main": [
        [
          {
            "node": "Recursive Character Text Splitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "main": [
        [
          {
            "node": "Embeddings OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Chat Message Received": {
      "main": [
        [
          {
            "node": "Embeddings OpenAI (retrieval)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI (retrieval)": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store (Retrieval)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store (Retrieval)": {
      "main": [
        [
          {
            "node": "Vector Store Tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "main": [
        [
          {
            "node": "OpenAI Chat Model (retrieval)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model (retrieval)": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "rag-chatbot-openai",
      "name": "RAG Chatbot OpenAI"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}














